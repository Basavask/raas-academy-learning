generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://avnadmin:AVNS_5Cu5GZrl-cPtWH5mm0E@raas-learning-demo-service-raas-learning-demo.b.aivencloud.com:28825/defaultdb?ssl-mode=REQUIRED"
  relationMode = "prisma"
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String
  name          String?
  role          Role        @default(STUDENT)
  profileImage  String?     @db.Text
  phone         String?
  address       String?     @db.Text
  bio           String?     @db.Text
  studentId     String?     @unique // Unique student ID generated after enrollment
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  enrollments   Enrollment[]
  payments      Payment[]
  
  @@map("users")
}

model Course {
  id            String      @id @default(cuid())
  title         String
  description   String      @db.Text
  price         Float
  imageUrl      String?     @db.Text
  isLive        Boolean     @default(false)
  duration      String?
  level         String?
  category      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  modules       CourseModule[]
  enrollments   Enrollment[]
  payments      Payment[]
  batches       CourseBatch[]
  
  @@map("courses")
}

model CourseBatch {
  id            String      @id @default(cuid())
  courseId      String
  batchNumber   String      // e.g., "Batch 1", "Batch 2"
  startDate     DateTime
  endDate       DateTime
  maxStudents   Int         @default(50)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  course        Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollments   Enrollment[]
  
  @@unique([courseId, batchNumber])
  @@map("course_batches")
}

model CourseModule {
  id            String      @id @default(cuid())
  courseId      String
  title         String
  description   String?     @db.Text
  order         Int
  content       String?     @db.Text
  videoUrl      String?     @db.Text
  duration      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  course        Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@map("course_modules")
}

model Enrollment {
  id            String      @id @default(cuid())
  userId        String
  courseId      String
  batchId       String?     // Link to specific batch
  paymentId     String?
  enrolledAt    DateTime    @default(now())
  progress      Float       @default(0)
  completedAt   DateTime?
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  batch         CourseBatch? @relation(fields: [batchId], references: [id])
  payment       Payment?    @relation(fields: [paymentId], references: [id])
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model Payment {
  id                String      @id @default(cuid())
  razorpayPaymentId String?     @unique
  razorpayOrderId   String?
  amount            Float
  currency          String      @default("INR")
  status            PaymentStatus @default(PENDING)
  userId            String
  courseId          String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollments       Enrollment[]
  
  @@map("payments")
}

model SubscribeNews {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("subscribe_news")
}

enum Role {
  ADMIN
  STUDENT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}